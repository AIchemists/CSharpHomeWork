<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="0.前言 _大家好，我是 Guide 哥！这是我的 221 篇优质原创文章。如需转载，请在文首注明地址，蟹蟹！_ 本文已经收录进我的 75K Star 的 Java 开源项目 JavaGuide： &amp;" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>接近8000字的Spring/SpringBoot常用注解总结！安排！ - JavaGuide - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=Z9Vw4btcgJmrpUEjY_SgebmTmDXJ_hPFoST7ad2aJp4" />
    <link id="MainCss" rel="stylesheet" href="/skins/bluesky/bundle-bluesky.min.css?v=nIYPSqBALS6DuGAjaXk5hWfDv_C8bPXulypjfPAZ-d4" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/bluesky/bundle-bluesky-mobile.min.css?v=s2piIyFV3NYqZWTmizb6uafQjmZFRhUBr8YMAdV85mA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/javaguide/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/javaguide/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/javaguide/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 554712;
        var currentBlogApp = 'javaguide';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlueSky';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/javaguide/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/javaguide/">JavaGuide</a>
</h1>
<h2>
开源项目—JavaGuide （59k+Star）作者运营维护。专注Java后端学习！内容涵盖Java面试指南、Spring Boot、Dubbo、Zookeeper、Redis、Nginx、消息队列、系统设计、架构、编程规范等内容。
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/javaguide/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/JavaGuide">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/javaguide/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
36&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
30</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/javaguide/p/spring-annotations.html">接近8000字的Spring/SpringBoot常用注解总结！安排！</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h3 id="0前言">0.前言</h3>
<p><em>大家好，我是 Guide 哥！这是我的 221 篇优质原创文章。如需转载，请在文首注明地址，蟹蟹！</em></p>
<p>本文已经收录进我的 75K Star 的 Java 开源项目 JavaGuide：<a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide</a> 相关阅读：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486494&amp;idx=1&amp;sn=a17e8278bd9fc1354449f925ef990c25&amp;chksm=cea243d5f9d5cac3b0b3b55769e162363256eb7fa483997c21b62cddb4ef2d583a2bcae0ac1a&amp;token=170865726&amp;lang=zh_CN#rd">V2.0 版本的 《JavaGuide面试突击版》来啦！带着它的在线阅读版本来啦！</a></p>
<p>可以毫不夸张地说，这篇文章介绍的 Spring/SpringBoot 常用注解基本已经涵盖你工作中遇到的大部分常用的场景。对于每一个注解我都说了具体用法，掌握搞懂，使用 SpringBoot 来开发项目基本没啥大问题了！</p>
<p>整个目录如下，内容有点多：</p>
<p><img src="https://imgkr.cn-bj.ufileos.com/3816c22b-8794-4130-8d0f-e5c6b7c54f0a.png" alt=""></p>
<p><strong>为什么要写这篇文章？</strong></p>
<p>最近看到网上有一篇关于 SpringBoot 常用注解的文章被转载的比较多，我看了文章内容之后属实觉得质量有点低，并且有点会误导没有太多实际使用经验的人（这些人又占据了大多数）。所以，自己索性花了大概 两天时间简单总结一下了。</p>
<p><strong>因为我个人的能力和精力有限，如果有任何不对或者需要完善的地方，请帮忙指出！Guide 哥感激不尽！</strong></p>
<h3 id="1-springbootapplication">1. <code>@SpringBootApplication</code></h3>
<p>这里先单独拎出<code>@SpringBootApplication</code> 注解说一下，虽然我们一般不会主动去使用它。</p>
<p><em>Guide 哥：这个注解是 Spring Boot 项目的基石，创建 SpringBoot 项目之后会默认在主类加上。</em></p>
<pre><code class="language-java">@SpringBootApplication
public class SpringSecurityJwtGuideApplication {
      public static void main(java.lang.String[] args) {
        SpringApplication.run(SpringSecurityJwtGuideApplication.class, args);
    }
}
</code></pre>
<p>我们可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。</p>
<pre><code class="language-java">package org.springframework.boot.autoconfigure;
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(excludeFilters = {
		@Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
public @interface SpringBootApplication {
   ......
}

package org.springframework.boot;
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Configuration
public @interface SpringBootConfiguration {

}
</code></pre>
<p>根据 SpringBoot 官网，这三个注解的作用分别是：</p>
<ul>
<li><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</li>
<li><code>@ComponentScan</code>： 扫描被<code>@Component</code> (<code>@Service</code>,<code>@Controller</code>)注解的 bean，注解默认会扫描该类所在的包下所有的类。</li>
<li><code>@Configuration</code>：允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</li>
</ul>
<h3 id="2-spring-bean-相关">2. Spring Bean 相关</h3>
<h4 id="21-autowired">2.1. <code>@Autowired</code></h4>
<p>自动导入对象到类中，被注入进的类同样要被 Spring 容器管理比如：Service 类注入到 Controller 类中。</p>
<pre><code class="language-java">@Service
public class UserService {
  ......
}

@RestController
@RequestMapping(&quot;/users&quot;)
public class UserController {
   @Autowired
   private UserService userService;
   ......
}
</code></pre>
<h4 id="22-componentrepositoryservice-controller">2.2. <code>Component</code>,<code>@Repository</code>,<code>@Service</code>, <code>@Controller</code></h4>
<p>我们一般使用 <code>@Autowired</code> 注解让 Spring 容器帮我们自动装配 bean。要想把类标识成可用于 <code>@Autowired</code> 注解自动装配的 bean 的类,可以采用以下注解实现：</p>
<ul>
<li><code>@Component</code> ：通用的注解，可标注任意类为 <code>Spring</code> 组件。如果一个 Bean 不知道属于哪个层，可以使用<code>@Component</code> 注解标注。</li>
<li><code>@Repository</code> : 对应持久层即 Dao 层，主要用于数据库相关操作。</li>
<li><code>@Service</code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</li>
<li><code>@Controller</code> : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</li>
</ul>
<h4 id="23-restcontroller">2.3. <code>@RestController</code></h4>
<p><code>@RestController</code>注解是<code>@Controller和</code>@<code>ResponseBody</code>的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器。</p>
<p><em>Guide 哥：现在都是前后端分离，说实话我已经很久没有用过<code>@Controller</code>。如果你的项目太老了的话，就当我没说。</em></p>
<p>单独使用 <code>@Controller</code> 不加 <code>@ResponseBody</code>的话一般使用在要返回一个视图的情况，这种情况属于比较传统的 Spring MVC 的应用，对应于前后端不分离的情况。<code>@Controller</code> +<code>@ResponseBody</code> 返回 JSON 或 XML 形式数据</p>
<p>关于<code>@RestController</code> 和 <code>@Controller</code>的对比，请看这篇文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485544&amp;idx=1&amp;sn=3cc95b88979e28fe3bfe539eb421c6d8&amp;chksm=cea247a3f9d5ceb5e324ff4b8697adc3e828ecf71a3468445e70221cce768d1e722085359907&amp;token=1725092312&amp;lang=zh_CN#rd">@RestController vs @Controller</a>。</p>
<h4 id="24-scope">2.4. <code>@Scope</code></h4>
<p>声明 Spring Bean 的作用域，使用方法:</p>
<pre><code class="language-java">@Bean
@Scope(&quot;singleton&quot;)
public Person personSingleton() {
    return new Person();
}
</code></pre>
<p><strong>四种常见的 Spring Bean 的作用域：</strong></p>
<ul>
<li>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。</li>
<li>prototype : 每次请求都会创建一个新的 bean 实例。</li>
<li>request : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。</li>
<li>session : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</li>
</ul>
<h4 id="25-configuration">2.5. <code>Configuration</code></h4>
<p>一般用来声明配置类，可以使用 <code>@Component</code>注解替代，不过使用<code>Configuration</code>注解声明配置类更加语义化。</p>
<pre><code class="language-java">@Configuration
public class AppConfig {
    @Bean
    public TransferService transferService() {
        return new TransferServiceImpl();
    }

}
</code></pre>
<h3 id="3-处理常见的-http-请求类型">3. 处理常见的 HTTP 请求类型</h3>
<p><strong>5 种常见的请求类型:</strong></p>
<ul>
<li><strong>GET</strong> ：请求从服务器获取特定资源。举个例子：<code>GET /users</code>（获取所有学生）</li>
<li><strong>POST</strong> ：在服务器上创建一个新的资源。举个例子：<code>POST /users</code>（创建学生）</li>
<li><strong>PUT</strong> ：更新服务器上的资源（客户端提供更新后的整个资源）。举个例子：<code>PUT /users/12</code>（更新编号为 12 的学生）</li>
<li><strong>DELETE</strong> ：从服务器删除特定的资源。举个例子：<code>DELETE /users/12</code>（删除编号为 12 的学生）</li>
<li><strong>PATCH</strong> ：更新服务器上的资源（客户端提供更改的属性，可以看做作是部分更新），使用的比较少，这里就不举例子了。</li>
</ul>
<h4 id="31-get-请求">3.1. GET 请求</h4>
<p><code>@GetMapping(&quot;users&quot;)</code> 等价于<code>@RequestMapping(value=&quot;/users&quot;,method=RequestMethod.GET)</code></p>
<pre><code class="language-java">@GetMapping(&quot;/users&quot;)
public ResponseEntity&lt;List&lt;User&gt;&gt; getAllUsers() {
 return userRepository.findAll();
}
</code></pre>
<h4 id="32-post-请求">3.2. POST 请求</h4>
<p><code>@PostMapping(&quot;users&quot;)</code> 等价于<code>@RequestMapping(value=&quot;/users&quot;,method=RequestMethod.POST)</code></p>
<p>关于<code>@RequestBody</code>注解的使用，在下面的“前后端传值”这块会讲到。</p>
<pre><code class="language-java">@PostMapping(&quot;/users&quot;)
public ResponseEntity&lt;User&gt; createUser(@Valid @RequestBody UserCreateRequest userCreateRequest) {
 return userRespository.save(user);
}
</code></pre>
<h4 id="33-put-请求">3.3. PUT 请求</h4>
<p><code>@PutMapping(&quot;/users/{userId}&quot;)</code> 等价于<code>@RequestMapping(value=&quot;/users/{userId}&quot;,method=RequestMethod.PUT)</code></p>
<pre><code class="language-java">@PutMapping(&quot;/users/{userId}&quot;)
public ResponseEntity&lt;User&gt; updateUser(@PathVariable(value = &quot;userId&quot;) Long userId,
  @Valid @RequestBody UserUpdateRequest userUpdateRequest) {
  ......
}
</code></pre>
<h4 id="34-delete-请求">3.4. <strong>DELETE 请求</strong></h4>
<p><code>@DeleteMapping(&quot;/users/{userId}&quot;)</code>等价于<code>@RequestMapping(value=&quot;/users/{userId}&quot;,method=RequestMethod.DELETE)</code></p>
<pre><code class="language-java">@DeleteMapping(&quot;/users/{userId}&quot;)
public ResponseEntity deleteUser(@PathVariable(value = &quot;userId&quot;) Long userId){
  ......
}
</code></pre>
<h4 id="35-patch-请求">3.5. <strong>PATCH 请求</strong></h4>
<p>一般实际项目中，我们都是 PUT 不够用了之后才用 PATCH 请求去更新数据。</p>
<pre><code class="language-java">  @PatchMapping(&quot;/profile&quot;)
  public ResponseEntity updateStudent(@RequestBody StudentUpdateRequest studentUpdateRequest) {
        studentRepository.updateDetail(studentUpdateRequest);
        return ResponseEntity.ok().build();
    }
</code></pre>
<h3 id="4-前后端传值">4. 前后端传值</h3>
<p><strong>掌握前后端传值的正确姿势，是你开始 CRUD 的第一步！</strong></p>
<h4 id="41-pathvariable-和-requestparam">4.1. <code>@PathVariable</code> 和 <code>@RequestParam</code></h4>
<p><code>@PathVariable</code>用于获取路径参数，<code>@RequestParam</code>用于获取查询参数。</p>
<p>举个简单的例子：</p>
<pre><code class="language-java">@GetMapping(&quot;/klasses/{klassId}/teachers&quot;)
public List&lt;Teacher&gt; getKlassRelatedTeachers(
         @PathVariable(&quot;klassId&quot;) Long klassId,
         @RequestParam(value = &quot;type&quot;, required = false) String type ) {
...
}
</code></pre>
<p>如果我们请求的 url 是：<code>/klasses/{123456}/teachers?type=web</code></p>
<p>那么我们服务获取到的数据就是：<code>klassId=123456,type=web</code>。</p>
<h4 id="42-requestbody">4.2. <code>@RequestBody</code></h4>
<p>用于读取 Request 请求（可能是 POST,PUT,DELETE,GET 请求）的 body 部分并且<strong>Content-Type 为 application/json</strong> 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上去。系统会使用<code>HttpMessageConverter</code>或者自定义的<code>HttpMessageConverter</code>将请求的 body 中的 json 字符串转换为 java 对象。</p>
<p>我用一个简单的例子来给演示一下基本使用！</p>
<p>我们有一个注册的接口：</p>
<pre><code class="language-java">@PostMapping(&quot;/sign-up&quot;)
public ResponseEntity signUp(@RequestBody @Valid UserRegisterRequest userRegisterRequest) {
  userService.save(userRegisterRequest);
  return ResponseEntity.ok().build();
}
</code></pre>
<p><code>UserRegisterRequest</code>对象：</p>
<pre><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
public class UserRegisterRequest {
    @NotBlank
    private String userName;
    @NotBlank
    private String password;
    @FullName
    @NotBlank
    private String fullName;
}
</code></pre>
<p>我们发送 post 请求到这个接口，并且 body 携带 JSON 数据：</p>
<pre><code class="language-json">{&quot;userName&quot;:&quot;coder&quot;,&quot;fullName&quot;:&quot;shuangkou&quot;,&quot;password&quot;:&quot;123456&quot;}
</code></pre>
<p>这样我们的后端就可以直接把 json 格式的数据映射到我们的 <code>UserRegisterRequest</code> 类上。</p>
<p><img src="https://imgkr.cn-bj.ufileos.com/663d1ec1-7ebc-41ab-8431-159dc1ec6589.png" alt=""></p>
<p>👉 需要注意的是：<strong>一个请求方法只可以有一个<code>@RequestBody</code>，但是可以有多个<code>@RequestParam</code>和<code>@PathVariable</code></strong>。 如果你的方法必须要用两个 <code>@RequestBody</code>来接受数据的话，大概率是你的数据库设计或者系统设计出问题了！</p>
<h3 id="5-读取配置信息">5. 读取配置信息</h3>
<p><strong>很多时候我们需要将一些常用的配置信息比如阿里云 oss、发送短信、微信认证的相关配置信息等等放到配置文件中。</strong></p>
<p><strong>下面我们来看一下 Spring 为我们提供了哪些方式帮助我们从配置文件中读取这些配置信息。</strong></p>
<p>我们的数据源<code>application.yml</code>内容如下：：</p>
<pre><code class="language-yaml">wuhan2020: 2020年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！

my-profile:
  name: Guide哥
  email: koushuangbwcx@163.com

library:
  location: 湖北武汉加油中国加油
  books:
    - name: 天才基本法
      description: 二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。
    - name: 时间的秩序
      description: 为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。
    - name: 了不起的我
      description: 如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？ 如何走出人生的艰难时刻？
</code></pre>
<h4 id="51-value常用">5.1. <code>@value</code>(常用)</h4>
<p>使用 <code>@Value(&quot;${property}&quot;)</code> 读取比较简单的配置信息：</p>
<pre><code class="language-java">@Value(&quot;${wuhan2020}&quot;)
String wuhan2020;
</code></pre>
<h4 id="52-configurationproperties常用">5.2. <code>@ConfigurationProperties</code>(常用)</h4>
<p>通过<code>@ConfigurationProperties</code>读取配置信息并与 bean 绑定。</p>
<pre><code class="language-java">@Component
@ConfigurationProperties(prefix = &quot;library&quot;)
class LibraryProperties {
    @NotEmpty
    private String location;
    private List&lt;Book&gt; books;

    @Setter
    @Getter
    @ToString
    static class Book {
        String name;
        String description;
    }
  省略getter/setter
  ......
}
</code></pre>
<p>你可以像使用普通的 Spring bean 一样，将其注入到类中使用。</p>
<h4 id="53-propertysource（不常用）">5.3. <code>PropertySource</code>（不常用）</h4>
<p><code>@PropertySource</code>读取指定 properties 文件</p>
<pre><code class="language-java">@Component
@PropertySource(&quot;classpath:website.properties&quot;)

class WebSite {
    @Value(&quot;${url}&quot;)
    private String url;

  省略getter/setter
  ......
}
</code></pre>
<p>更多内容请查看我的这篇文章：《<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486181&amp;idx=2&amp;sn=10db0ae64ef501f96a5b0dbc4bd78786&amp;chksm=cea2452ef9d5cc384678e456427328600971180a77e40c13936b19369672ca3e342c26e92b50&amp;token=816772476&amp;lang=zh_CN#rd">10 分钟搞定 SpringBoot 如何优雅读取配置文件？</a>》 。</p>
<h3 id="6-参数校验">6. 参数校验</h3>
<p><strong>数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。</strong></p>
<p><strong>JSR(Java Specification Requests）</strong> 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，这样就可以在需要校验的时候进行校验了，非常方便！</p>
<p>校验的时候我们实际用的是 <strong>Hibernate Validator</strong> 框架。Hibernate Validator 是 Hibernate 团队最初的数据校验框架，Hibernate Validator 4.x 是 Bean Validation 1.0（JSR 303）的参考实现，Hibernate Validator 5.x 是 Bean Validation 1.1（JSR 349）的参考实现，目前最新版的 Hibernate Validator 6.x 是 Bean Validation 2.0（JSR 380）的参考实现。</p>
<p>SpringBoot 项目的 spring-boot-starter-web 依赖中已经有 hibernate-validator 包，不需要引用相关依赖。如下图所示（通过 idea 插件—Maven Helper 生成）：</p>
<p><img src="https://imgkr.cn-bj.ufileos.com/c7bacd12-1c1a-4e41-aaaf-4cad840fc073.png" alt=""></p>
<p>非 SpringBoot 项目需要自行引入相关依赖包，这里不多做讲解，具体可以查看我的这篇文章：《<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485783&amp;idx=1&amp;sn=a407f3b75efa17c643407daa7fb2acd6&amp;chksm=cea2469cf9d5cf8afbcd0a8a1c9cc4294d6805b8e01bee6f76bb2884c5bc15478e91459def49&amp;token=292197051&amp;lang=zh_CN#rd">如何在 Spring/Spring Boot 中做参数校验？你需要了解的都在这里！</a>》。</p>
<p>👉 需要注意的是： <strong>所有的注解，推荐使用 JSR 注解，即<code>javax.validation.constraints</code>，而不是<code>org.hibernate.validator.constraints</code></strong></p>
<h4 id="61-一些常用的字段验证的注解">6.1. 一些常用的字段验证的注解</h4>
<ul>
<li><code>@NotEmpty</code> 被注释的字符串的不能为 null 也不能为空</li>
<li><code>@NotBlank</code> 被注释的字符串非 null，并且必须包含一个非空白字符</li>
<li><code>@Null</code> 被注释的元素必须为 null</li>
<li><code>@NotNull</code> 被注释的元素必须不为 null</li>
<li><code>@AssertTrue</code> 被注释的元素必须为 true</li>
<li><code>@AssertFalse</code> 被注释的元素必须为 false</li>
<li><code>@Pattern(regex=,flag=)</code>被注释的元素必须符合指定的正则表达式</li>
<li><code>@Email</code> 被注释的元素必须是 Email 格式。</li>
<li><code>@Min(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@Max(value)</code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@DecimalMin(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@DecimalMax(value)</code> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@Size(max=, min=)</code>被注释的元素的大小必须在指定的范围内</li>
<li><code>@Digits (integer, fraction)</code>被注释的元素必须是一个数字，其值必须在可接受的范围内</li>
<li><code>@Past</code>被注释的元素必须是一个过去的日期</li>
<li><code>@Future</code> 被注释的元素必须是一个将来的日期</li>
<li>......</li>
</ul>
<h4 id="62-验证请求体requestbody">6.2. 验证请求体(RequestBody)</h4>
<pre><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
public class Person {

    @NotNull(message = &quot;classId 不能为空&quot;)
    private String classId;

    @Size(max = 33)
    @NotNull(message = &quot;name 不能为空&quot;)
    private String name;

    @Pattern(regexp = &quot;((^Man$|^Woman$|^UGM$))&quot;, message = &quot;sex 值不在可选范围&quot;)
    @NotNull(message = &quot;sex 不能为空&quot;)
    private String sex;

    @Email(message = &quot;email 格式不正确&quot;)
    @NotNull(message = &quot;email 不能为空&quot;)
    private String email;

}
</code></pre>
<p>我们在需要验证的参数上加上了<code>@Valid</code>注解，如果验证失败，它将抛出<code>MethodArgumentNotValidException</code>。</p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/api&quot;)
public class PersonController {

    @PostMapping(&quot;/person&quot;)
    public ResponseEntity&lt;Person&gt; getPerson(@RequestBody @Valid Person person) {
        return ResponseEntity.ok().body(person);
    }
}
</code></pre>
<h4 id="63-验证请求参数path-variables-和-request-parameters">6.3. 验证请求参数(Path Variables 和 Request Parameters)</h4>
<p><strong>一定一定不要忘记在类上加上 <code>Validated</code> 注解了，这个参数可以告诉 Spring 去校验方法参数。</strong></p>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;/api&quot;)
@Validated
public class PersonController {

    @GetMapping(&quot;/person/{id}&quot;)
    public ResponseEntity&lt;Integer&gt; getPersonByID(@Valid @PathVariable(&quot;id&quot;) @Max(value = 5,message = &quot;超过 id 的范围了&quot;) Integer id) {
        return ResponseEntity.ok().body(id);
    }
}
</code></pre>
<p>更多关于如何在 Spring 项目中进行参数校验的内容，请看《<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485783&amp;idx=1&amp;sn=a407f3b75efa17c643407daa7fb2acd6&amp;chksm=cea2469cf9d5cf8afbcd0a8a1c9cc4294d6805b8e01bee6f76bb2884c5bc15478e91459def49&amp;token=292197051&amp;lang=zh_CN#rd">如何在 Spring/Spring Boot 中做参数校验？你需要了解的都在这里！</a>》这篇文章。</p>
<h3 id="7-全局处理-controller-层异常">7. 全局处理 Controller 层异常</h3>
<p>介绍一下我们 Spring 项目必备的全局处理 Controller 层异常。</p>
<p><strong>相关注解：</strong></p>
<ol>
<li><code>@ControllerAdvice</code> :注解定义全局异常处理类</li>
<li><code>@ExceptionHandler</code> :注解声明异常处理方法</li>
</ol>
<p>如何使用呢？拿我们在第 5 节参数校验这块来举例子。如果方法参数不对的话就会抛出<code>MethodArgumentNotValidException</code>，我们来处理这个异常。</p>
<pre><code class="language-java">@ControllerAdvice
@ResponseBody
public class GlobalExceptionHandler {

    /**
     * 请求参数异常处理
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity&lt;?&gt; handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, HttpServletRequest request) {
       ......
    }
}
</code></pre>
<p>更多关于 Spring Boot 异常处理的内容，请看我的这两篇文章：</p>
<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485568&amp;idx=2&amp;sn=c5ba880fd0c5d82e39531fa42cb036ac&amp;chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&amp;token=2133161636&amp;lang=zh_CN#rd">SpringBoot 处理异常的几种常见姿势</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486379&amp;idx=2&amp;sn=48c29ae65b3ed874749f0803f0e4d90e&amp;chksm=cea24460f9d5cd769ed53ad7e17c97a7963a89f5350e370be633db0ae8d783c3a3dbd58c70f8&amp;token=1054498516&amp;lang=zh_CN#rd">使用枚举简单封装一个优雅的 Spring Boot 全局异常处理！</a></li>
</ol>
<h3 id="8-jpa-相关">8. JPA 相关</h3>
<h4 id="81-创建表">8.1. 创建表</h4>
<p><code>@Entity</code>声明一个类对应一个数据库实体。</p>
<p><code>@Table</code> 设置表明</p>
<pre><code class="language-java">@Entity
@Table(name = &quot;role&quot;)
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    省略getter/setter......
}
</code></pre>
<h4 id="82-创建主键">8.2. 创建主键</h4>
<p><code>@Id</code> ：声明一个字段为主键。</p>
<p>使用<code>@Id</code>声明之后，我们还需要定义主键的生成策略。我们可以使用 <code>@GeneratedValue</code> 指定主键生成策略。</p>
<p><strong>1.通过 <code>@GeneratedValue</code>直接使用 JPA 内置提供的四种主键生成策略来指定主键生成策略。</strong></p>
<pre><code class="language-java">@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
</code></pre>
<p>JPA 使用枚举定义了 4 中常见的主键生成策略，如下：</p>
<p><em>Guide 哥：枚举替代常量的一种用法</em></p>
<pre><code class="language-java">public enum GenerationType {

    /**
     * 使用一个特定的数据库表格来保存主键
     * 持久化引擎通过关系数据库的一张特定的表格来生成主键,
     */
    TABLE,

    /**
     *在某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做&quot;序列(sequence)&quot;的机制生成主键
     */
    SEQUENCE,

    /**
     * 主键自增长
     */
    IDENTITY,

    /**
     *把主键生成策略交给持久化引擎(persistence engine),
     *持久化引擎会根据数据库在以上三种主键生成 策略中选择其中一种
     */
    AUTO
}

</code></pre>
<p><code>@GeneratedValue</code>注解默认使用的策略是<code>GenerationType.AUTO</code></p>
<pre><code class="language-java">public @interface GeneratedValue {

    GenerationType strategy() default AUTO;
    String generator() default &quot;&quot;;
}
</code></pre>
<p>一般使用 MySQL 数据库的话，使用<code>GenerationType.IDENTITY</code>策略比较普遍一点（分布式系统的话需要另外考虑使用分布式 ID）。</p>
<p><strong>2.通过 <code>@GenericGenerator</code>声明一个主键策略，然后 <code>@GeneratedValue</code>使用这个策略</strong></p>
<pre><code class="language-java">@Id
@GeneratedValue(generator = &quot;IdentityIdGenerator&quot;)
@GenericGenerator(name = &quot;IdentityIdGenerator&quot;, strategy = &quot;identity&quot;)
private Long id;
</code></pre>
<p>等价于：</p>
<pre><code class="language-java">@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
</code></pre>
<p>jpa 提供的主键生成策略有如下几种：</p>
<pre><code class="language-java">public class DefaultIdentifierGeneratorFactory
		implements MutableIdentifierGeneratorFactory, Serializable, ServiceRegistryAwareService {

	@SuppressWarnings(&quot;deprecation&quot;)
	public DefaultIdentifierGeneratorFactory() {
		register( &quot;uuid2&quot;, UUIDGenerator.class );
		register( &quot;guid&quot;, GUIDGenerator.class );			// can be done with UUIDGenerator + strategy
		register( &quot;uuid&quot;, UUIDHexGenerator.class );			// &quot;deprecated&quot; for new use
		register( &quot;uuid.hex&quot;, UUIDHexGenerator.class ); 	// uuid.hex is deprecated
		register( &quot;assigned&quot;, Assigned.class );
		register( &quot;identity&quot;, IdentityGenerator.class );
		register( &quot;select&quot;, SelectGenerator.class );
		register( &quot;sequence&quot;, SequenceStyleGenerator.class );
		register( &quot;seqhilo&quot;, SequenceHiLoGenerator.class );
		register( &quot;increment&quot;, IncrementGenerator.class );
		register( &quot;foreign&quot;, ForeignGenerator.class );
		register( &quot;sequence-identity&quot;, SequenceIdentityGenerator.class );
		register( &quot;enhanced-sequence&quot;, SequenceStyleGenerator.class );
		register( &quot;enhanced-table&quot;, TableGenerator.class );
	}

	public void register(String strategy, Class generatorClass) {
		LOG.debugf( &quot;Registering IdentifierGenerator strategy [%s] -&gt; [%s]&quot;, strategy, generatorClass.getName() );
		final Class previous = generatorStrategyToClassNameMap.put( strategy, generatorClass );
		if ( previous != null ) {
			LOG.debugf( &quot;    - overriding [%s]&quot;, previous.getName() );
		}
	}

}
</code></pre>
<h4 id="83-设置字段类型">8.3. 设置字段类型</h4>
<p><code>@Column</code> 声明字段。</p>
<p><strong>示例：</strong></p>
<p>设置属性 userName 对应的数据库字段名为 user_name，长度为 32，非空</p>
<pre><code class="language-java">@Column(name = &quot;user_name&quot;, nullable = false, length=32)
private String userName;
</code></pre>
<p>设置字段类型并且加默认值，这个还是挺常用的。</p>
<pre><code class="language-java">Column(columnDefinition = &quot;tinyint(1) default 1&quot;)
private Boolean enabled;
</code></pre>
<h4 id="84-指定不持久化特定字段">8.4. 指定不持久化特定字段</h4>
<p><code>@Transient</code> ：声明不需要与数据库映射的字段，在保存的时候不需要保存进数据库 。</p>
<p>如果我们想让<code>secrect</code> 这个字段不被持久化，可以使用 <code>@Transient</code>关键字声明。</p>
<pre><code class="language-java">Entity(name=&quot;USER&quot;)
public class User {

    ......
    @Transient
    private String secrect; // not persistent because of @Transient

}
</code></pre>
<p>除了 <code>@Transient</code>关键字声明， 还可以采用下面几种方法：</p>
<pre><code class="language-java">static String secrect; // not persistent because of static
final String secrect = “Satish”; // not persistent because of final
transient String secrect; // not persistent because of transient
</code></pre>
<p>一般使用注解的方式比较多。</p>
<h4 id="85-声明大字段">8.5. 声明大字段</h4>
<p><code>@Lob</code>:声明某个字段为大字段。</p>
<pre><code class="language-java">@Lob
private String content;
</code></pre>
<p>更详细的声明：</p>
<pre><code class="language-java">@Lob
//指定 Lob 类型数据的获取策略， FetchType.EAGER 表示非延迟 加载，而 FetchType. LAZY 表示延迟加载 ；
@Basic(fetch = FetchType.EAGER)
//columnDefinition 属性指定数据表对应的 Lob 字段类型
@Column(name = &quot;content&quot;, columnDefinition = &quot;LONGTEXT NOT NULL&quot;)
private String content;
</code></pre>
<h4 id="86-创建枚举类型的字段">8.6. 创建枚举类型的字段</h4>
<p>可以使用枚举类型的字段，不过枚举字段要用<code>@Enumerated</code>注解修饰。</p>
<pre><code class="language-java">public enum Gender {
    MALE(&quot;男性&quot;),
    FEMALE(&quot;女性&quot;);

    private String value;
    Gender(String str){
        value=str;
    }
}
</code></pre>
<pre><code class="language-java">@Entity
@Table(name = &quot;role&quot;)
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    @Enumerated(EnumType.STRING)
    private Gender gender;
    省略getter/setter......
}
</code></pre>
<p>数据库里面对应存储的是 MAIL/FEMAIL。</p>
<h4 id="87-增加审计功能">8.7. 增加审计功能</h4>
<p>只要继承了 <code>AbstractAuditBase</code>的类都会默认加上下面四个字段。</p>
<pre><code class="language-java">@Data
@AllArgsConstructor
@NoArgsConstructor
@MappedSuperclass
@EntityListeners(value = AuditingEntityListener.class)
public abstract class AbstractAuditBase {

    @CreatedDate
    @Column(updatable = false)
    @JsonIgnore
    private Instant createdAt;

    @LastModifiedDate
    @JsonIgnore
    private Instant updatedAt;

    @CreatedBy
    @Column(updatable = false)
    @JsonIgnore
    private String createdBy;

    @LastModifiedBy
    @JsonIgnore
    private String updatedBy;
}

</code></pre>
<p>我们对应的审计功能对应地配置类可能是下面这样的（Spring Security 项目）:</p>
<pre><code class="language-java">
@Configuration
@EnableJpaAuditing
public class AuditSecurityConfiguration {
    @Bean
    AuditorAware&lt;String&gt; auditorAware() {
        return () -&gt; Optional.ofNullable(SecurityContextHolder.getContext())
                .map(SecurityContext::getAuthentication)
                .filter(Authentication::isAuthenticated)
                .map(Authentication::getName);
    }
}
</code></pre>
<p>简单介绍一下上面设计到的一些注解：</p>
<ol>
<li>
<p><code>@CreatedDate</code>: 表示该字段为创建时间时间字段，在这个实体被 insert 的时候，会设置值</p>
</li>
<li>
<p><code>@CreatedBy</code> :表示该字段为创建人，在这个实体被 insert 的时候，会设置值</p>
<p><code>@LastModifiedDate</code>、<code>@LastModifiedBy</code>同理。</p>
</li>
</ol>
<p><code>@EnableJpaAuditing</code>：开启 JPA 审计功能。</p>
<h4 id="88-删除修改数据">8.8. 删除/修改数据</h4>
<p><code>@Modifying</code> 注解提示 JPA 该操作是修改操作,注意还要配合<code>@Transactional</code>注解使用。</p>
<pre><code class="language-java">@Repository
public interface UserRepository extends JpaRepository&lt;User, Integer&gt; {

    @Modifying
    @Transactional(rollbackFor = Exception.class)
    void deleteByUserName(String userName);
}
</code></pre>
<h4 id="89-关联关系">8.9. 关联关系</h4>
<ul>
<li><code>@OneToOne</code> 声明一对一关系</li>
<li><code>@OneToMany</code> 声明一对多关系</li>
<li><code>@ManyToOne</code>声明多对一关系</li>
<li><code>MangToMang</code>声明多对多关系</li>
</ul>
<p>更多关于 Spring Boot JPA 的文章请看我的这篇文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485689&amp;idx=1&amp;sn=061b32c2222869932be5631fb0bb5260&amp;chksm=cea24732f9d5ce24a356fb3675170e7843addbfcc79ee267cfdb45c83fc7e90babf0f20d22e1&amp;token=292197051&amp;lang=zh_CN#rd">一文搞懂如何在 Spring Boot 正确中使用 JPA</a> 。</p>
<h3 id="9-事务-transactional">9. 事务 <code>@Transactional</code></h3>
<p>在要开启事务的方法上使用<code>@Transactional</code>注解即可!</p>
<pre><code class="language-java">@Transactional(rollbackFor = Exception.class)
public void save() {
  ......
}

</code></pre>
<p>我们知道 Exception 分为运行时异常 RuntimeException 和非运行时异常。在<code>@Transactional</code>注解中如果不配置<code>rollbackFor</code>属性,那么事物只会在遇到<code>RuntimeException</code>的时候才会回滚,加上<code>rollbackFor=Exception.class</code>,可以让事物在遇到非运行时异常时也回滚。</p>
<p><code>@Transactional</code> 注解一般用在可以作用在<code>类</code>或者<code>方法</code>上。</p>
<ul>
<li><strong>作用于类</strong>：当把<code>@Transactional 注解放在类上时，表示所有该类的</code>public 方法都配置相同的事务属性信息。</li>
<li><strong>作用于方法</strong>：当类配置了<code>@Transactional</code>，方法也配置了<code>@Transactional</code>，方法的事务会覆盖类的事务配置信息。</li>
</ul>
<p>更多关于关于 Spring 事务的内容请查看：</p>
<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484943&amp;idx=1&amp;sn=46b9082af4ec223137df7d1c8303ca24&amp;chksm=cea249c4f9d5c0d2b8212a17252cbfb74e5fbe5488b76d829827421c53332326d1ec360f5d63&amp;token=1082669959&amp;lang=zh_CN#rd">可能是最漂亮的 Spring 事务管理详解</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486483&amp;idx=2&amp;sn=77be488e206186803531ea5d7164ec53&amp;chksm=cea243d8f9d5cacecaa5c5daae4cde4c697b9b5b21f96dfc6cce428cfcb62b88b3970c26b9c2&amp;token=816772476&amp;lang=zh_CN#rd">一口气说出 6 种 @Transactional 注解失效场景</a></li>
</ol>
<h3 id="10-json-数据处理">10. json 数据处理</h3>
<h4 id="101-过滤-json-数据">10.1. 过滤 json 数据</h4>
<p><strong><code>@JsonIgnoreProperties</code> 作用在类上用于过滤掉特定字段不返回或者不解析。</strong></p>
<pre><code class="language-java">//生成json时将userRoles属性过滤
@JsonIgnoreProperties({&quot;userRoles&quot;})
public class User {

    private String userName;
    private String fullName;
    private String password;
    @JsonIgnore
    private List&lt;UserRole&gt; userRoles = new ArrayList&lt;&gt;();
}
</code></pre>
<p><strong><code>@JsonIgnore</code>一般用于类的属性上，作用和上面的<code>@JsonIgnoreProperties</code> 一样。</strong></p>
<pre><code class="language-java">
public class User {

    private String userName;
    private String fullName;
    private String password;
   //生成json时将userRoles属性过滤
    @JsonIgnore
    private List&lt;UserRole&gt; userRoles = new ArrayList&lt;&gt;();
}
</code></pre>
<h4 id="102-格式化-json-数据">10.2. 格式化 json 数据</h4>
<p><code>@JsonFormat</code>一般用来格式化 json 数据。：</p>
<p>比如：</p>
<pre><code class="language-java">@JsonFormat(shape=JsonFormat.Shape.STRING, pattern=&quot;yyyy-MM-dd'T'HH:mm:ss.SSS'Z'&quot;, timezone=&quot;GMT&quot;)
private Date date;
</code></pre>
<h4 id="103-扁平化对象">10.3. 扁平化对象</h4>
<pre><code class="language-java">@Getter
@Setter
@ToString
public class Account {
    @JsonUnwrapped
    private Location location;
    @JsonUnwrapped
    private PersonInfo personInfo;

  @Getter
  @Setter
  @ToString
  public static class Location {
     private String provinceName;
     private String countyName;
  }
  @Getter
  @Setter
  @ToString
  public static class PersonInfo {
    private String userName;
    private String fullName;
  }
}

</code></pre>
<p>未扁平化之前：</p>
<pre><code class="language-json">{
    &quot;location&quot;: {
        &quot;provinceName&quot;:&quot;湖北&quot;,
        &quot;countyName&quot;:&quot;武汉&quot;
    },
    &quot;personInfo&quot;: {
        &quot;userName&quot;: &quot;coder1234&quot;,
        &quot;fullName&quot;: &quot;shaungkou&quot;
    }
}
</code></pre>
<p>使用<code>@JsonUnwrapped</code> 扁平对象之后：</p>
<pre><code class="language-java">@Getter
@Setter
@ToString
public class Account {
    @JsonUnwrapped
    private Location location;
    @JsonUnwrapped
    private PersonInfo personInfo;
    ......
}
</code></pre>
<pre><code class="language-json">{
  &quot;provinceName&quot;:&quot;湖北&quot;,
  &quot;countyName&quot;:&quot;武汉&quot;,
  &quot;userName&quot;: &quot;coder1234&quot;,
  &quot;fullName&quot;: &quot;shaungkou&quot;
}
</code></pre>
<h3 id="11-测试相关">11. 测试相关</h3>
<p><strong><code>@ActiveProfiles</code>一般作用于测试类上， 用于声明生效的 Spring 配置文件。</strong></p>
<pre><code class="language-java">@SpringBootTest(webEnvironment = RANDOM_PORT)
@ActiveProfiles(&quot;test&quot;)
@Slf4j
public abstract class TestBase {
  ......
}
</code></pre>
<p><strong><code>@Test</code>声明一个方法为测试方法</strong></p>
<p><strong><code>@Transactional</code>被声明的测试方法的数据会回滚，避免污染测试数据。</strong></p>
<p><strong><code>@WithMockUser</code> Spring Security 提供的，用来模拟一个真实用户，并且可以赋予权限。</strong></p>
<pre><code class="language-java">    @Test
    @Transactional
    @WithMockUser(username = &quot;user-id-18163138155&quot;, authorities = &quot;ROLE_TEACHER&quot;)
    void should_import_student_success() throws Exception {
        ......
    }
</code></pre>
<p><em>暂时总结到这里吧！虽然花了挺长时间才写完，不过可能还是会一些常用的注解的被漏掉，所以，我将文章也同步到了 Github 上去，Github 地址：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/framework/spring/spring-annotations.md">https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/framework/spring/spring-annotations.md </a> 欢迎完善！</em></p>
<p>本文已经收录进我的 75K Star 的 Java 开源项目 JavaGuide：<a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide</a>。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-30 17:17</span>&nbsp;
<a href="https://www.cnblogs.com/javaguide/">JavaGuide</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12809981" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12809981);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 554712, cb_blogApp = 'javaguide', cb_blogUserGuid = 'cfe25dd6-9b26-4721-9863-08d753a8c051';
    var cb_entryId = 12809981, cb_entryCreatedDate = '2020-04-30 17:17', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 JavaGuide
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>