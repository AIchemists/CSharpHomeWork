<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="0. 前言 这是对C 基础系列的一个总结，现在我们利用之前学到的知识做一个小小的工具来给我们使用。 如果有看过IO篇的小伙伴，应该有印象。当时我提过一个场景描述，我们在平时使用系统的时候，经常会为了找" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C# 基础知识系列- 17 实战篇 编写一个小工具（1） - 月影西下 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=KPz7rj-c2sTAV1_ck1aDmbZcuCG3KBhyLnfvzf6nn94" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=na9bpAY4yh7uEWCcrXj3vfJM3VBse8YtU6-5fUUQPz0" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/c7jie/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/c7jie/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/c7jie/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 572560;
        var currentBlogApp = 'c7jie';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'coffee';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/c7jie/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/c7jie/">月影西下</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/c7jie/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%9C%88%E5%BD%B1%E8%A5%BF%E4%B8%8B">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/c7jie/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/c7jie/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
25&nbsp;
文章- 
0&nbsp;
评论- 
19&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/c7jie/p/12842459.html">C# 基础知识系列- 17 实战篇 编写一个小工具（1）</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="0-前言">0. 前言</h1>
<p>这是对C# 基础系列的一个总结，现在我们利用之前学到的知识做一个小小的工具来给我们使用。</p>
<p>如果有看过IO篇的小伙伴，应该有印象。当时我提过一个场景描述，我们在平时使用系统的时候，经常会为了找某个文件的位置而烦恼。那么我们现在尝试写一个控制台程序来帮助我们找文件的具体位置。</p>
<h1 id="1-分析">1. 分析</h1>
<p>好，大家应该初步了解了需求内容。然后让我们来做一个简单的需求分析：</p>
<ol>
<li>简单分析一下需求包括哪些功能点</li>
<li>规划各个功能点的实现方式</li>
</ol>
<p>嗯，理论上讲还有一大堆的步骤，但因为是个练手的小项目就不扯那么多没用的了。简单来讲就是，分两步：</p>
<ol>
<li>抓取系统可以访问的所有文件，并保存其全路径</li>
<li>根据输入的参数查询文件的全路径</li>
</ol>
<p>需求分析完了，然后寻找可以实现的技术，我们现有的技术有IO、文件/路径操作、任务模式等技术，那么可以供我们选择的技术一目了然了：通过文件/目录/路径API访问所有的文件目录，使用字典保存，然后使用Linq查询文件所在目录。</p>
<p>OK，需求分析完了，技术也确认了。那么我们现在开始吧，小伙伴们跟紧了哦，车速不快的。</p>
<h1 id="2-开始">2. 开始</h1>
<p>这里简单演示一下如何用Rider和VSCode、Visual Studio2019创建项目。</p>
<h2 id="21-创建一个名为-filefinder的项目">2.1. 创建一个名为 FileFinder的项目</h2>
<p><strong>a.使用Rider：</strong></p>
<p>点击箭头所指方向：</p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132408633-1977411928.png" alt="image-20200506213821025"></p>
<p>先在左侧选择Console Application，然后修改 Project name，最后修改 Solution Directory为自己的目录：</p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132408868-828817260.png" alt="image-20200506214124769"></p>
<p>然后点击 Create，创建完成结果如下：</p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132409070-1958362690.png" alt="image-20200506214423649"></p>
<p>Rider创建项目的步骤在Windows、Linux、Mac三个系统都是一样的。</p>
<p><strong>b. 使用VS Code创建项目</strong></p>
<p>使用VS Code创建项目与Rider和Visual Studio有所不同，步骤比较繁琐：</p>
<p>先在合适的文件夹下创建一个fileFinder目录，并在fileFinder目录下打开命令行，输入以下命令：</p>
<pre><code class="language-bash">dotnet new sln -n fileFinder # 创建一个名为 fileFinder 的解决方案
dotnet new console -n fileFinder # 创建一个名为 fileFinder的控制台程序
dotnet sln add fileFinder # 把 fileFinder的项目添加到fileFinder的解决方案里
</code></pre>
<p>最终结果应该是这样的：</p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132409239-1935349895.png" alt="image-20200506220949536"></p>
<p><strong>c.使用 Visual Studio</strong></p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132409529-617796445.png" alt="file"></p>
<p>选择【创建新项目】<br>
<img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132409761-1923183354.png" alt="file"><br>
注意框住地方的选择，选控制台程序，然后点击下一步<br>
<img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132409931-215388526.png" alt="file"><br>
填写项目名称、路径，点击创建<br>
<img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132410140-541682316.png" alt="file"></p>
<h2 id="22-开始编写程序">2.2 开始编写程序</h2>
<p>现在我们创建完成了一个项目，然后可以开始编写我们的程序了。</p>
<p>首先创建一个遍历所有目录的方法：</p>
<pre><code class="language-c#">public static Dictionary&lt;string,List&lt;string&gt;&gt; OverDirectories()
{
    //
    return null;
}
</code></pre>
<p>现在我们有一个问题，因为Windows的特殊性，目录结构分为了<strong>磁盘:\文件夹</strong>这种形式，我们没法通过设置一个根目录去遍历，这时候就要借助一下官方文档了。通过查阅API，我们发现一个类：</p>
<pre><code class="language-c#">public sealed class DriveInfo : System.Runtime.Serialization.ISerializable//提供对有关驱动器的信息的访问。
</code></pre>
<p>有一个方法：</p>
<pre><code class="language-c#">public static System.IO.DriveInfo[] GetDrives ();// 检索计算机上的所有逻辑驱动器的驱动器名称。
</code></pre>
<p>再看一下属性：</p>
<pre><code class="language-c#">public string Name { get; }// 获取驱动器的名称，如 C:\。
public System.IO.DirectoryInfo RootDirectory { get; }// 获取驱动器的根目录。
</code></pre>
<p>初步查看满足我们的需要，先在Program.cs的头添加命名空间引用：</p>
<pre><code class="language-c#">using System.IO;
</code></pre>
<p>表示在这个代码文件中会使用这个命名空间的类或者结构体等元素。</p>
<p>在项目中编写一个方法：</p>
<pre><code class="language-c#">public static void GetDrivers()
{
    var drives = DriveInfo.GetDrives();
    foreach(var drive in drives)
    {
        Console.WriteLine($&quot;驱动器名称：{drive.Name}:\t {drive.RootDirectory}&quot;);
    }
}
</code></pre>
<p>然后修改Main方法为：</p>
<pre><code class="language-c#">static void Main(string[] args)
{
    GetDrivers();
}
</code></pre>
<p>运行程序，下图是Linux系统的打印结果：（Rider/Visual Studio的运行程序快捷键是F5）</p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132410397-978572009.png" alt="image-20200506224209939"></p>
<p>经过完美符合我们的需求，修改GetDrivers方法，使其可以返回所有驱动器的根目录：</p>
<p>先引入以下命名空间的引用：</p>
<pre><code class="language-c#">using System.Linq;// Linq的支持
using System.Collections.Generic;//泛型集合的支持
</code></pre>
<p>修改方法如下：</p>
<pre><code class="language-c#">public static List&lt;DirectoryInfo&gt; GetDrivers()
{
    var drives = DriveInfo.GetDrives();
    return drives.Select(p=&gt;p.RootDirectory).ToList();
}
</code></pre>
<p>然后回到方法OverDirectories里，先获取所有的驱动器，遍历所有驱动器下的所有目录和文件，之后对遍历结果归类：</p>
<p>修改OverrDirectories方法：</p>
<pre><code class="language-c#">public static Dictionary&lt;string,List&lt;string&gt;&gt; OverDirectories(DirectoryInfo rootDirectory)
{
    var dict = new Dictionary&lt;string, List&lt;string&gt;&gt;();// 创建一个保存数据的 字典类型
    foreach(var file in rootDirectory.EnumerateFiles()) //枚举当前目录下的所有文件
    {
        var key = Path.GetFileNameWithoutExtension(file.Name); //获取无扩展名的文件名
        if(!dict.ContainsKey(key)) //检查dict是否存放过 文件名，如果没有，则创建一个列表，如果有则在列表中添加一条文件的全路径
        {
            dict[key] = new List&lt;string&gt;();
        }
        dict[key].Add(file.FullName);
    }

    // 枚举当前目录的子目录，递归调用该方法
    var dirs = rootDirectory.EnumerateDirectories().Select(OverDirectories); 
    foreach(var dir in dirs)//处理返回的字典枚举，将数据合并到当前dict变量中
    {
        foreach(var key in dir.Keys)
        {
            if(!dict.ContainsKey(key))
            {
                dict[key] = new List&lt;string&gt;();
            }
            dict[key].AddRange(dir[key]);
        }
    }
    // 返回结果
    return dict;
}
</code></pre>
<p>我们简单测试一下，修改Main方法：</p>
<pre><code class="language-c#">static void Main(string[] args)
{
    var drivers = GetDrivers();
    var results = OverDirectories(drivers[0]);
    Console.WriteLine(results);
}
</code></pre>
<p>嗯，如果不出意外的话，你应该能得到类似如下的提示：</p>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132410689-1523828861.png" alt="image-20200506234510641"></p>
<p>这是因为在系统中（不管哪种系统）会有一些文件或者目录是我们没有权限访问的，这时候就必须用try/catch处理这些没有访问权限的目录和文件。因为我们平时使用不会 把文件放到这些目录下面，所以我们可以简单的略过这些目录。</p>
<p>同时观察一下，GetDrivers 返回的是一组DirectoryInfo实例，而OverDirectories每次处理一个目录，然后返回一个字典集合，所以我们需要整合这些集合，但我们在OverDirectories里编写过相似的代码，为了减少重复代码的编写，提取这部分代码为一个方法：</p>
<pre><code class="language-c#">public static Dictionary&lt;string,List&lt;string&gt;&gt; Concat(params Dictionary&lt;string,List&lt;string&gt;&gt;[] dicts)
{
    var dict = new Dictionary&lt;string,List&lt;string&gt;&gt;();
    foreach(var dir in dicts)
    {
        foreach(var key in dir.Keys)
        {
            if(!dict.ContainsKey(key))
            {
                dict[key] = new List&lt;string&gt;();
            }
            dict[key].AddRange(dir[key]);
        }
    }
    return dict;
}
</code></pre>
<blockquote>
<p>params 是C#可变参数列表关键字，声明方式： params T[] values。表示方法可以接收任意个T类型的参数，方法中接到的是一个数组</p>
</blockquote>
<p>继续改造 OverDirectories方法，增加异常处理：</p>
<pre><code class="language-c#">public static Dictionary&lt;string,List&lt;string&gt;&gt; OverDirectories(DirectoryInfo rootDirectory)
{
    var dict = new Dictionary&lt;string, List&lt;string&gt;&gt;();
    IEnumerable&lt;FileInfo&gt; files = new List&lt;FileInfo&gt;();
    try
    {
        files = rootDirectory.EnumerateFiles();
    }
    catch(Exception e)
    {
        Console.WriteLine($&quot;错误信息：{e}&quot;);//打印错误信息
    }

    foreach(var file in files)
    {
        var key = Path.GetFileNameWithoutExtension(file.Name);
        if(!dict.ContainsKey(key))
        {
            dict[key] = new List&lt;string&gt;();
        }
        dict[key].Add(file.FullName);
    }

    try
    {
        var dicts = rootDirectory.EnumerateDirectories().Select(OverDirectories);    
        return Concat(dicts.Append(dict).ToArray());
    }
    catch (System.Exception e)
    {
        Console.WriteLine($&quot;错误信息：{e}&quot;);//打印错误信息
    }
    return dict;
}
</code></pre>
<p>最后修改 Main方法，使其支持使用用户输入的字符串进行查询：</p>
<pre><code class="language-c#">static void Main(string[] args)
{
    var drivers = GetDrivers();
    var results = Concat(drivers.Select(OverDirectories).ToArray());
    Console.WriteLine(&quot;请输入要查询的文件名：&quot;);
    var search = Console.ReadLine().Trim();
    var keys = results.Keys.Where(p=&gt;p.Contains(search));

    foreach(var key in keys)
    {
        var list = results[key];
        Console.WriteLine(&quot;查找到路径是：&quot;);
        foreach(var path in list)
        {
            Console.WriteLine(path);
        }
    }
}
</code></pre>
<h1 id="3-总结">3. 总结</h1>
<p>代码进行到这里了，可以说基本功能已经完成。如果有小伙伴尝试使用示例代码的话，可能会遇到各种问题，下一篇继续为大家在现有知识基础上做优化，让它成为一个真正意义上可以使用的小工具。</p>
<blockquote>
<p>更多内容烦请关注<a href="https://blogs.attachie.club">我的博客《高先生小屋》</a></p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/other/1266612/202005/1266612-20200507132411013-877236558.png" alt="file"></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-05-07 13:24</span>&nbsp;
<a href="https://www.cnblogs.com/c7jie/">月影西下</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12842459" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12842459);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 572560, cb_blogApp = 'c7jie', cb_blogUserGuid = 'f7f130fe-8c19-4f36-4637-08d4ef52ecb6';
    var cb_entryId = 12842459, cb_entryCreatedDate = '2020-05-07 13:24', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 月影西下
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>