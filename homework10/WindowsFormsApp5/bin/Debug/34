<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="写在前面 之前微信公众号里有一位叫sara的朋友建议我写一下Parallel的相关内容，因为手中商城的重构工作量较大，一时之间无法抽出时间。近日，这套系统已有阶段性成果，所以准备写一下Parallel" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C#并发编程之初识并行编程 - 艾心❤ - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip.min.css?v=1CubIA3L29CO3-6VLJIOrrj2uGfyKeX_-xaumWzHk7o" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/edison0621/custom.css?v=x9pcFUu&#x2B;fiua3mZOJk/N1Ry7KuY=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip-mobile.min.css?v=0pGk3D9Ik_jI4q1TALBT2ybOjIePHS_80_0J4DDOQiY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/edison0621/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/edison0621/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/edison0621/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 152901;
        var currentBlogApp = 'edison0621';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'darkgreentrip';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/edison0621/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/edison0621/">艾心</a>
</h1>
<h2>
努力写出高质量的文章，走心、不忽悠，只为共同进步
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/edison0621/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E8%89%BE%E5%BF%83%E2%9D%A4">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/edison0621/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
49&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
406</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/edison0621/p/12846376.html">C#并发编程之初识并行编程</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <h1 style="padding: 0px 100px 10px 20px; color: #0378bb; line-height: 1.5em; clear: both; font-size: 200%; font-weight: bold; border-bottom-color: #5ea2d6; border-left-color: #3d97cb; border-bottom-width: 1px; border-left-width: 12px; border-bottom-style: solid; border-left-style: solid;">写在前面</h1>
<p><span style="font-size: small;">之前微信公众号里有一位叫sara的朋友建议我写一下Parallel的相关内容，因为手中商城的重构工作量较大，一时之间无法抽出时间。近日，这套系统已有阶段性成果，所以准备写一下Parallel的相关内容，正好也延续之前的C#并发编程系列。</span></p>
<p><span style="font-size: small;">Parallel是并行编程的相关内容，而Parallel.For和Parallel.Foreach又是并行编程中相当重要的方法，<strong>所以不能孤立的去讨论Parallel，必须要放到并行编程的讨论中去</strong>。</span></p>
<p><span style="font-size: small;">并行化，一般是对所要完成的任务进行划分，并且以并发的方式处理属于自己的那份任务，并且最终可以做到整合，所以并行化总会产生并发性。</span></p>
<p><span style="font-size: small;">实际上并行是并发的子集，<span style="font-size: small;">并发和并行都可以是多线程执行，就看其处理器是否是多核的，就看这些线程能不能同时被cpu多个核执行，如果可以就说明是并行，而并发是多个线程被cpu单核轮流切换着执行。<strong>总之，只有在多核处理器上并行才会有意义</strong>。</span></span></p>
<blockquote>
<p><span style="font-size: small;"><span style="font-size: small;">并行化总会有着很大的挑战，即每一个部分以不同顺序或者交错执行，都能保证最终结果的正确性，尤其涉及到各并行部分之间需要串行执行的部分，这个挑战是很大的。由于并行化程序设计要比普通的串行代码复杂很多，也难维护很多，所以不是所有的问题都可以使用并行的。比如绝对执行时间本来就很少，即使使用并发可以提高整体的执行时间，那么我们也应该使用传统方式。但是如果主要涉及到提升用户响应能力的功能，那么我们推荐使用并行编程，同时处理分割后依然可以独立进行而不影响整体任务的功能也可以使用并行编程。<br /></span></span></p>
</blockquote>
<h1 style="padding: 0px 100px 10px 20px; color: #0378bb; line-height: 1.5em; clear: both; font-size: 200%; font-weight: bold; border-bottom-color: #5ea2d6; border-left-color: #3d97cb; border-bottom-width: 1px; border-left-width: 12px; border-bottom-style: solid; border-left-style: solid;">并行的相关实战</h1>
<p><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;">说到并行，就需要先说下.NET FX4中引入的Task Parallel Library（任务并行库），简称TPL。TPL主要覆盖了三大使用场景，数据并行、任务并行和流水线，TPL以其高度的封装特性，隐藏了并行编程里复杂的处理，使得开发人员可以以较低的门槛进行并行编程。</span></span></span></p>
<h2 style="padding: 5px 8px 5px 30px; border-radius: 5px; border: 1px solid #d0cfcf; border-image: none; color: #aa7652; font-size: 18px; background-color: #f5f5f4;">数据并行</h2>
<p>这种场景在于有大量数据需要处理，而且对每一份数据都要执行的同样的操作。</p>
<p><a href="https://img2020.cnblogs.com/blog/533598/202005/533598-20200507225435447-1844786434.png"><img style="display: inline; background-image: none" title="data" src="https://img2020.cnblogs.com/blog/533598/202005/533598-20200507225435798-1537556040.png" alt="data" width="880" height="382" border="0"></a></p>
<h2 style="padding: 5px 8px 5px 30px; border-radius: 5px; border: 1px solid #d0cfcf; border-image: none; color: #aa7652; font-size: 18px; background-color: #f5f5f4;">任务并行</h2>
<p>有很多相对独立的不同操作，或者可以分割成多个子任务但彼此之间是独立的，可以通过任务并行来发挥并行化的优势<br /><a href="https://img2020.cnblogs.com/blog/533598/202005/533598-20200507225436023-1929758037.png"><img style="display: inline; background-image: none" title="task" src="https://img2020.cnblogs.com/blog/533598/202005/533598-20200507225436557-2015347552.png" alt="task" width="880" height="382" border="0"></a></p>
<h2 style="padding: 5px 8px 5px 30px; border-radius: 5px; border: 1px solid #d0cfcf; border-image: none; color: #aa7652; font-size: 18px; background-color: #f5f5f4;">流水线</h2>
<p>流水线是以上两种场景的结合，这个也是最复杂最难处理的场景，因为这里面涉及到多个并发的任务进行协调处理。</p>
<p><em>此场景，奈何小编理解的不是很好，所以不敢乱写，多方查找资料，找到了oschina上的一篇文章。</em></p>
<p><em><em>流水线技术，指的是允许一个机器周期内的计算机各处理步骤重叠进行。特别是，当执行一条指令时，可以读取下一条指令，也就意味着，在任何一个时刻可以有不止一条指令在&ldquo;流水线&rdquo;上，每条指令处在不同的执行阶段。这样，即便读取和执行每条指令的时间保持不变，而计算机的总的吞吐量提高了。</em><br /><img src="https://oscimg.oschina.net/oscnet/86ecf6e03cbd5bbac60d7ca0c138a97e673.jpg" alt=""></em></p>
<p><em>原文地址：<a href="https://my.oschina.net/u/3374461/blog/1930305">https://my.oschina.net/u/3374461/blog/1930305</a><br /></em></p>
<h2 style="padding: 5px 8px 5px 30px; border-radius: 5px; border: 1px solid #d0cfcf; border-image: none; color: #aa7652; font-size: 18px; background-color: #f5f5f4;">System.Threading.Tasks.Parallel类</h2>
<p>虽然Parallel类在System.Threading.Tasks命名空间下，但是创建并行代码不一定要直接使用Task类的实例，事实上我们可以直接使用Parallel静态类所提供的方法。</p>
<p>Parallel.For：为固定数目的独立For循环迭代提供了负载均衡式的并行执行</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>Parallel.For(0, 5, i =&gt;</pre>
<pre><span class="lnum">   2:  </span>{</pre>
<pre class="alt"><span class="lnum">   3:  </span>    Console.WriteLine(<span class="str">"the number is"</span>, i);</pre>
<pre><span class="lnum">   4:  </span>});</pre>
</div>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>Parallel.Foreach：为固定数目的独立ForEach循环迭代提供了负载均衡式的并行执行。这个方法支持自定义分区器（Partitioner），以使得我们截图完全掌控数据分发。</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">string</span>[] letters = <span class="kwrd">new</span> <span class="kwrd">string</span>[] {<span class="str">"A"</span>, <span class="str">"B"</span>, <span class="str">"C"</span>, <span class="str">"D"</span>, <span class="str">"E"</span>, <span class="str">"F"</span>, <span class="str">"G"</span>, <span class="str">"H"</span>, <span class="str">"I"</span>, <span class="str">"J"</span>, <span class="str">"K"</span>, <span class="str">"L"</span>, <span class="str">"M"</span>};</pre>
<pre><span class="lnum">   2:  </span>Parallel.ForEach(letters, i =&gt; Console.WriteLine(<span class="str">"letter is "</span> + i));</pre>
</div>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>Parallel.Invoke：为给定的独立任务提供了负载均衡式的并行执行，接下来会重点讨论这个方法。</p>
<h2 style="padding: 5px 8px 5px 30px; border-radius: 5px; border: 1px solid #d0cfcf; border-image: none; color: #aa7652; font-size: 18px; background-color: #f5f5f4;">Parallel.Invoke</h2>
<p>这个方法很实用，也很简单。</p>
<p>以下代码可以返回void的无参数方法：</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>Parallel.Invoke(Method1(), Method2(), Method3(), Method4());</pre>
</div>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>通过Lambda表达式运行：</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>Parallel.Invoke(() =&gt; Method1(), () =&gt; Method2(), () =&gt; Method3(), () =&gt; Method4());</pre>
</div>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p>通过Lambda表达式和匿名类型来运行：</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>Parallel.Invoke(() =&gt;</pre>
<pre><span class="lnum">   2:  </span>{</pre>
<pre class="alt"><span class="lnum">   3:  </span>    Method1();</pre>
<pre><span class="lnum">   4:  </span>    <span class="rem">// Do some thing</span></pre>
<pre class="alt"><span class="lnum">   5:  </span>}, </pre>
<pre><span class="lnum">   6:  </span>() =&gt;</pre>
<pre class="alt"><span class="lnum">   7:  </span>{</pre>
<pre><span class="lnum">   8:  </span>    Method2();</pre>
<pre class="alt"><span class="lnum">   9:  </span>    <span class="rem">// Do some thing</span></pre>
<pre><span class="lnum">  10:  </span>}, </pre>
<pre class="alt"><span class="lnum">  11:  </span>() =&gt;</pre>
<pre><span class="lnum">  12:  </span>{</pre>
<pre class="alt"><span class="lnum">  13:  </span>    Method3();</pre>
<pre><span class="lnum">  14:  </span>    <span class="rem">// Do some thing</span></pre>
<pre class="alt"><span class="lnum">  15:  </span>}, </pre>
<pre><span class="lnum">  16:  </span>() =&gt;</pre>
<pre class="alt"><span class="lnum">  17:  </span>{</pre>
<pre><span class="lnum">  18:  </span>    Method4();</pre>
<pre class="alt"><span class="lnum">  19:  </span>    <span class="rem">// Do some thing</span></pre>
<pre><span class="lnum">  20:  </span>});</pre>
</div>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<style><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
<p><span style="font-size: small;">以上代码需要并行执行四个方法，但是如果空余逻辑内核不足四个或者根本就没有四个逻辑内核，这四个方法是不能并发执行的。因此在理想情况下，正好有至少四个空余逻辑内核时，我们就可以并行执行这四个方法了。</span></p>
<blockquote>
<p><span style="font-size: small;">这四个方法，我们无法准确的预测其执行顺序，因为这一切是由底层的逻辑会根据运行时的现有可用资源创建出最合适的执行计划。当然TPL依然有机制保证方法的顺序执行，这个以后我们再讨论。</span></p>
</blockquote>
<p><span style="font-size: small;">Parallel.Invoke最大的优势就是简单，但是并不能因为它简单，就不分场合的使用，事实上，我们需要在某些场景下权衡使用。</span></p>
<ul>
<li><span style="font-size: small;">如果这四个方法的执行时间不一致，那么就需要根据最长的执行时间才能返回控制，这就可能造成一些逻辑内核处于闲置状态。所以我们需要预测一下大致的执行时间，如果时间过长，那么就要认真考虑是否真的需要使用这个方法。</span></li>
<li><span style="font-size: small;">其扩展性很差，因为它只能调用固定数目的逻辑内核，剩余内核就会一直处于闲置状态。</span></li>
<li><span style="font-size: small;">方法之间的交互极其困难，极易产生Bug，当然这是并行编程的常见问题，TPL也考虑到了这点，也有足够机制解决这个问题。</span></li>
<li><span style="font-size: small;">如果其中某个方法有了异常，捕捉异常会很困难，所以需要大家在相应的被调用方法里编写足够的日志。</span></li>
<li><span style="font-size: small;">小编在以前的使用中还遇到了内存溢出的异常，这些也会在以后的文章中说明其原因以及解决方法。</span></li>
</ul>
<p><span style="font-size: small;">今天就写到这儿吧，已经十二点了，要休息一下，保护头发了，哈哈哈。</span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-08 10:08</span>&nbsp;
<a href="https://www.cnblogs.com/edison0621/">艾心❤</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12846376" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12846376);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 152901, cb_blogApp = 'edison0621', cb_blogUserGuid = 'b7cd2392-0bc8-e211-8d02-90b11c0b17d6';
    var cb_entryId = 12846376, cb_entryCreatedDate = '2020-05-08 10:08', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 艾心❤
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>