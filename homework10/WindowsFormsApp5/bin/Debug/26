<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="ArrayList 是我们常用的工具类之一，但是在多线程的情况下，ArrayList 作为共享变量时，并不是线程安全的。主要有以下两个原因： 1、 ArrayList 自身的 elementData、" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Java 经典面试题：聊一聊 JUC 下的 CopyOnWriteArrayList - 平头哥的技术博文 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey.min.css?v=_B1ixsexV8tpUJyj4tVsjnDwkM8eRY6ZCwGSi1TrV7s" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey-mobile.min.css?v=cYvlxMu_nd6MVfg-vi7YqOC6FaZ7VHFsDM166vO_ekA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jamaler/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jamaler/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jamaler/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 535728;
        var currentBlogApp = 'jamaler';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlackLowKey';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/jamaler/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jamaler/">平头哥的技术博文</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jamaler/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%B9%B3%E5%A4%B4%E5%93%A5%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/jamaler/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
64&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
70</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/jamaler/p/12843126.html">Java 经典面试题：聊一聊 JUC 下的 CopyOnWriteArrayList</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>ArrayList 是我们常用的工具类之一，但是在多线程的情况下，ArrayList 作为共享变量时，并不是线程安全的。主要有以下两个原因：</p>
<ul>
<li>1、 ArrayList 自身的 elementData、size、modCount 在进行操作的时候，都没有加锁；</li>
<li>2、这些变量没有被 volatile 修饰，在多线程的情况下，对这些变量操作可能会出现值被覆盖的情况；</li>
</ul>
<p>如果我们想在多线程情况下使用 ArrayList 怎么办？有以下几种办法：</p>
<ul>
<li>使用 Collections.SynchronizedList ；</li>
<li>使用 JUC 下的 CopyOnWriteArrayList；</li>
</ul>
<p>先来看看 SynchronizedLis，Collections 其实就是对 ArrayList 进行了一个加锁包装，这个从源码中可以看出;</p>
<pre><code class="language-java">...部分源码，完整源码请查看 JDK 源码...
public void add(int index, E element) {
    synchronized (mutex) {list.add(index, element);}
}
public E remove(int index) {
    synchronized (mutex) {return list.remove(index);}
}
</code></pre>
<p>对于 Collections.SynchronizedList 比较简单，就是锁包装了一下，就不多说了~</p>
<p>CopyOnWriteArrayList 也是 JUC 下面的一个并发容器类。不知道你发现没有，但凡你常用的集合类，在 JUC 下基本上都可以找到一个并发类，比如 hashMap 有对应的 ConcurrentHashMap。</p>
<p>CopyOnWriteArrayList 跟 ArrayList 在整体架构上并没有什么区别，底层都是基于数组实现的。不同的地方大概有两点：</p>
<ul>
<li>底层数组被 volatile 关键字修饰；</li>
<li>对数组进行数据变更时加锁；</li>
</ul>
<p>CopyOnWriteArrayList 的加锁操作跟 Collections.SynchronizedList 简单的加锁还不一样，CopyOnWriteArrayList 中的加锁过程还是非常值得学习的。CopyOnWriteArrayList 的加锁过程，大概可以概括为以下四步：</p>
<ul>
<li>1、加锁；</li>
<li>2、从原数组中拷贝出新数组；</li>
<li>3、在新数组上进行操作，并把新数组赋值给数组容器；</li>
<li>4、解锁；</li>
</ul>
<p>结合源码来深入了解 CopyOnWriteArrayList 的并发实现，我们选择 ArrayList 最简单的将元素新增数组尾部的操作来分析实现过程，源码如下：</p>
<pre><code class="language-java">/**
 * Appends the specified element to the end of this list.
 *
 * @param e element to be appended to this list
 * @return {@code true} (as specified by {@link Collection#add})
 */
public boolean add(E e) {
	// 获取锁，注意这是全局锁
    final ReentrantLock lock = this.lock;
    // 加锁操作
    lock.lock();
    try {
	    // 获取数组
        Object[] elements = getArray();
        int len = elements.length;
        // 将数组内容拷贝到新数组中
        Object[] newElements = Arrays.copyOf(elements, len + 1);
        // 对新数组操作
        newElements[len] = e;
        // 变更底层数组的引用
        setArray(newElements);
        return true;
    } finally {
	    // 解锁
        lock.unlock();
    }
}
</code></pre>
<p>CopyOnWriteArrayList 就是通过加锁来说实现容器安全的，可能你会有疑问，<strong>为什么引入一个新数组，数组的拷贝还是消耗时间的，直接在原数组上操作不就好了吗？</strong>。主要原因有以下两点：</p>
<ul>
<li>volatile 关键字修饰的是数组，如果我们简单的在原来数组上修改其中某几个元素的值，是无法触发可见性的，我们必须通过修改数组的内存地址才行，也就说要对数组进行重新赋值才行。</li>
<li>在新的数组上进行拷贝，对老数组没有任何影响，只有新数组完全拷贝完成之后，外部才能访问到，降低了在赋值过程中，老数组数据变动的影响。比如经典的 <code>ConcurrentModificationException</code> 异常问题。</li>
</ul>
<p>其他的新增方法就自己去查看源码了，相差不多，基本上是一样的。对数组的删除跟新增都是差不多，不同的地方是在删除了时候，赋值给新数组时会出现不同的选择策略。我把源码贴上：</p>
<pre><code class="language-java">public E remove(int index) {
    final ReentrantLock lock = this.lock;
    // 加锁
    lock.lock();
    try {
        Object[] elements = getArray();
        int len = elements.length;
        E oldValue = get(elements, index);
        // 先计算出要移动的问题
        int numMoved = len - index - 1;
        // 根据移动的位置选择策略
        if (numMoved == 0)
            setArray(Arrays.copyOf(elements, len - 1));
        else {
            Object[] newElements = new Object[len - 1];
            System.arraycopy(elements, 0, newElements, 0, index);
            System.arraycopy(elements, index + 1, newElements, index,
                             numMoved);
            setArray(newElements);
        }
        return oldValue;
    } finally {
       //解锁
        lock.unlock();
    }
}
</code></pre>
<p>CopyOnWriteArrayList 还有其他的方法，在这里我就不过多介绍了。根据你们自己的疑问去扒一扒 CopyOnWriteArrayList 的源码就知道了，总体来说 CopyOnWriteArrayList 并不难，甚至感觉比 ArrayList 要简单。</p>
<p>总结一下：CopyOnWriteArrayList 是安全的并发容器，有以下两个特点：</p>
<ul>
<li>1、对数组的写操作加锁，读操作不加锁；</li>
<li>2、通过加锁 + 数组拷贝+ volatile 来保证线程安全；</li>
</ul>
<blockquote>
<p>欢迎关注公众号【<strong>互联网平头哥</strong>】，一起成长，一起进步~。</p>
</blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzUvMTcxNDgwNGE1MDk2MjQ4NQ?x-oss-process=image/format,png#pic_center" alt="互联网平头哥"></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-07 15:01</span>&nbsp;
<a href="https://www.cnblogs.com/jamaler/">平头哥的技术博文</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12843126" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12843126);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 535728, cb_blogApp = 'jamaler', cb_blogUserGuid = 'f746e91a-fdad-49d4-b26f-08d726ff4493';
    var cb_entryId = 12843126, cb_entryCreatedDate = '2020-05-07 15:01', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 平头哥的技术博文
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>