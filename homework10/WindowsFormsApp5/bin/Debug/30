<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="摘要 The Constrained Application Protocol （CoAP）是一种专用的Web传输协议，用于受约束的节点和受约束的(例如，低功率，有损)网络。 节点通常具有带少量ROM" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>抓住CoAP协议的“心” - 三升水 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=UeHyLv1TT2WTz4TwfUOiMoKNmtFvLUjUnIhFE2UmZ7I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/sanshengshui/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/sanshengshui/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/sanshengshui/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 463176;
        var currentBlogApp = 'sanshengshui';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/sanshengshui/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/sanshengshui/">三升水</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/sanshengshui/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%B8%89%E5%8D%87%E6%B0%B4">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/sanshengshui/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
40&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
52</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/sanshengshui/p/12849014.html">抓住CoAP协议的“心”</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><img src="https://james-1258744956.cos.ap-shanghai.myqcloud.com/thingsboard-coap-part2/coap-banner2.jpg" alt=""></p>
<h2 id="摘要">摘要</h2>
<p><strong>The Constrained Application Protocol</strong>（CoAP）是一种专用的Web传输协议，用于受约束的节点和受约束的(例如，低功率，有损)网络。</p>
<p>节点通常具有带少量ROM和RAM的8位微控制器，而诸如低功耗无线个人局域网 （6LoWPAN）上的IPv6之类的受限网络通常具有较高的分组错误率，典型吞吐量为10 kbps 。该协议旨在用于机器对机器（M2M）应用，例如智能能源和楼宇自动化。</p>
<p>CoAP提供了应用程序端点之间的请求/响应交互模型，支持服务的资源发现，并包括Web的关键概念，例如URI和Internet媒体类型。CoAP旨在轻松与HTTP交互以与Web集成，同时满足诸如多播支持，非常低的开销以及在受限环境中的简单性等特殊要求。</p>
<h2 id="介绍">介绍</h2>
<p>互联网上的Web服务（Web API）的使用在大多数应用程序中已经无处不在，并且依赖于Web 的<strong>Representational State Transfer</strong>（REST）体系结构。</p>
<p><strong>Constrained RESTful Environments</strong>（CoRE）的工作旨在以最合适的形式实现REST体系结构，以适用于最受约束的节点（例如RAM和ROM受限的8位微控制器）和网络（例如6LoWPAN）。诸如6LoWPAN之类的受约束的网络支持将IPv6数据包分段成小的链路层帧。但是，这会大大减少数据包交付概率。CoAP的一个设计目标是保持消息开销较小，从而限制了分段的需要。</p>
<p>CoAP的主要目标之一是针对这种受限环境的特殊要求设计通用的Web协议，尤其是考虑到能源，楼宇自动化以及其他机器对机器（M2M）应用程序。</p>
<p>CoAP的目标不是盲目地压缩HTTP，而是实现与HTTP通用但针对M2M应用程序进行了优化的REST的子集。尽管CoAP可用于将简单的HTTP接口重新生成更紧凑的协议，更重要的是，它还提供了M2M的功能，例如内置资源发现，多播支持和异步消息交换。</p>
<p>该协议可以轻松转换为HTTP以与现有Web集成，同时满足特殊要求，例如多播支持，非常低的开销以及受约束环境和M2M应用程序的简便性。</p>
<h3 id="特性">特性</h3>
<p>CoAP具有以下主要功能:</p>
<ul>
<li>在受限条件下满足M2M要求的Web协议</li>
<li>UDP [ RFC0768 ]绑定，具有可选的可靠性，支持单播和多播请求。</li>
<li>异步消息交换。</li>
<li>低的报头开销和解析复杂度。</li>
<li>简单的代理和缓存功能。</li>
<li>无状态HTTP映射，允许构建代理通过HTTP统一方式或HTTP访问CoAP资源。</li>
<li>绑定到数据报传输层安全性（DTLS）的安全性。</li>
<li>URI和内容类型支持。</li>
</ul>
<h3 id="消息格式">消息格式</h3>
<pre><code>  0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Ver| T |  TKL  |      Code     |          Message ID           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Token (if any, TKL bytes) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>
<p>上图的头部字段定义如下:</p>
<p>Version(Ver): 2位无符号整数。CoAP版本号。本规范的实现必须将此字段设置为1(01二进制)。其他值保留用于将来的版本。</p>
<p>Type(T): 2位无符号整数。指示此消息的类型是否为<strong>Confirmable</strong>(0), <strong>Non-Confirmable</strong>, <strong>Acknowledgement</strong>(2)或者<strong>Reset</strong>(3)。</p>
<p>Token Length(TKL): 4位无符号整数。指示可变长度令牌字段的长度（0-8个字节）。长度9-15 保留，不得发送，并且必须作为消息格式错误进行处理。</p>
<p>Code: 8位无符号整数，响应码。</p>
<p>Message ID: 网络字节顺序的16位无符号整数。用于检测消息重复并将<code>确认</code>/<code>重置</code>类型的消息与<code>可确认</code>/<code>不可确认</code>类型的消息进行匹配。</p>
<h2 id="coap初体验">CoAP初体验</h2>
<p>CoAP有两款我觉得比较不错的客户端:</p>
<ul>
<li>
<p><a href="https://www.npmjs.com/package/coap-cli">CoAP-CLI</a>: CoAP-CLI是CoAP的命令行界面，基于node.js和<a href="https://github.com/mcollina/node-coap">node-coap</a>所构建。</p>
</li>
<li>
<p><a href="https://github.com/tzolov/coap-shell">The CoAP Shell</a>提供用于与CoAP协议交互的命令行界面。它支持<code>coap:</code>和<code>coaps</code>模式(例如UDP和DTLS)。CoAP Shell建立在<a href="https://projects.spring.io/spring-shell/">Spring Shell</a>, <a href="https://www.eclipse.org/californium/">Californium(Cf)</a>和<a href="https://www.eclipse.org/californium/">Scandium(Sc)</a>项目之上。它是一个<a href="https://spring.io/projects/spring-boot">SpringBoot</a>应用程序,它内置于单个可自我执行的jar中，并且可以在任何<strong>Java8+</strong>环境中运行。</p>
</li>
</ul>
<p>由于CoAP Shell能更好的体现和展示CoAP的功能、特性和消息格式，接下来我将通过CoAP Shell来讲述CoAP协议相关知识点。</p>
<p>以下是<strong>CoAP Shell</strong>效果图</p>
<p><img src="https://james-1258744956.cos.ap-shanghai.myqcloud.com/thingsboard-coap-part2/coap-shell-demo2.gif" alt=""></p>
<h3 id="如何构建">如何构建</h3>
<p>从GitHub克隆项目并使用Maven进行构建，或者直接从下方下载。</p>
<p>链接: <a href="https://pan.baidu.com/s/1soGdqIlOBQe968_wezxq7Q">https://pan.baidu.com/s/1soGdqIlOBQe968_wezxq7Q</a>  密码: rw6o</p>
<pre><code class="language-shell">git clone https://github.com/sanshengshui/coap-shell
cd coap-shell
mvn clean install
</code></pre>
<p>然后在该target文件夹中运行可执行jar包。</p>
<h3 id="快速开始">快速开始</h3>
<ol>
<li>启动Shell:</li>
</ol>
<pre><code class="language-bash">java -jar coap-shell-1.1.2-SNAPSHOT.jar
</code></pre>
<pre><code class="language-bash">  _____     ___   ___     ______       ____
 / ___/__  / _ | / _ \   / __/ /  ___ / / /
/ /__/ _ \/ __ |/ ___/  _\ \/ _ \/ -_) / /
\___/\___/_/ |_/_/     /___/_//_/\__/_/_/
CoAP Shell (v1.1.2-SNAPSHOT)
For assistance hit TAB or type &quot;help&quot;.

server-unknown:&gt;
</code></pre>
<ol start="2">
<li>连接到CoAP服务器(例如<code>coap://californium.eclipse.org/</code>或<code>coap://coap.me</code>)</li>
</ol>
<pre><code class="language-bash">server-unknown:&gt;connect coap://coap.me
available
coap://coap.me:&gt;ping
available
coap://coap.me:&gt;
</code></pre>
<ol start="3">
<li>发现可用的CoAP资源</li>
</ol>
<pre><code>coap://coap.me:&gt;discover
┌──────────────────────────────┬────────────────────────┬─────────────────────────┬───────────┬──────┬─────────────┐
│Path [href]                   │Resource Type [rt]      │Content Type [ct]        │Interface  │Size  │Observable   │
│                              │                        │                         │[if]       │[sz]  │[obs]        │
├──────────────────────────────┼────────────────────────┼─────────────────────────┼───────────┼──────┼─────────────┤
│/123412341234123412341234     │123412341234123412341234│text/plain (0)           │           │      │             │
│/3                            │3                       │application/json (50)    │           │      │             │
│/4                            │4                       │application/json (50)    │           │      │             │
│/5                            │5                       │application/json (50)    │           │      │             │
│/bl%C3%A5b%C3%A6rsyltet%C3%B8y│blåbærsyltetøy          │text/plain (0)           │           │      │             │
│/broken                       │Type2, Type1            │text/plain (0)           │If2, If1   │      │             │
│/create1                      │create1                 │text/plain (0)           │           │      │             │
│/hello                        │Type1                   │text/plain (0)           │If1        │      │             │
│/large                        │Type1, Type2            │text/plain (0)           │If2        │1700  │             │
│/large-create                 │large-create            │text/plain (0)           │           │      │             │
│/large-update                 │large-update            │text/plain (0)           │           │      │             │
│/location-query               │location-query          │text/plain (0)           │           │      │             │
│/location1                    │location1               │application/link-format  │           │      │             │
│                              │                        │(40)                     │           │      │             │
│/multi-format                 │multi-format            │text/plain (0)           │           │      │             │
│/path                         │path                    │application/link-format  │           │      │             │
│                              │                        │(40)                     │           │      │             │
│/query                        │query                   │text/plain (0)           │           │      │             │
│/secret                       │secret                  │text/plain (0)           │           │      │             │
│/seg1                         │seg1                    │application/link-format  │           │      │             │
│                              │                        │(40)                     │           │      │             │
│/separate                     │separate                │text/plain (0)           │           │      │             │
│/sink                         │sink                    │text/plain (0)           │           │      │             │
│/test                         │test                    │text/plain (0)           │           │      │             │
│/validate                     │validate                │text/plain (0)           │           │      │             │
│/weird33                      │weird33                 │text/plain (0)           │           │      │             │
│/weird333                     │weird333                │text/plain (0)           │           │      │             │
│/weird3333                    │weird3333               │text/plain (0)           │           │      │             │
│/weird33333                   │weird33333              │text/plain (0)           │           │      │             │
│/weird44                      │weird44                 │text/plain (0)           │           │      │             │
│/weird55                      │weird55                 │text/plain (0)           │           │      │             │
└──────────────────────────────┴────────────────────────┴─────────────────────────┴───────────┴──────┴─────────────┘

coap://coap.me:&gt;
</code></pre>
<ol start="4">
<li><strong>GET</strong>获取资源数据</li>
</ol>
<pre><code class="language-bash">coap://coap.me:&gt;get /hello
----------------------------------- Response -----------------------------------
GET coap://coap.me/hello
MID: 64187, Type: ACK, Token: 50E8F0AC1BA8D277, RTT: 3368ms
Options: {&quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 205-Reset Content, Payload: 5B
................................... Payload ....................................
world
--------------------------------------------------------------------------------
</code></pre>
<p>从以上列表能清晰的看出CoAP的消息格式和数据包。</p>
<ul>
<li>
<p><code>coap://coap.me/hello</code> : 是CoAP协议的uri</p>
</li>
<li>
<p>MID: 消息的ID,用于唯一区分消息。</p>
</li>
<li>
<p>Type: 消息类型，这里的消息类型为：<strong>Acknowledgement</strong>(确认)</p>
</li>
<li>
<p>Token: 消息会话</p>
</li>
<li>
<p>Options：<code>{&quot;Content-Format&quot;:&quot;text/plain&quot;}</code>消息可选性，这里表示消息的数据类型为<strong>文本</strong></p>
</li>
<li>
<p>Status: 状态码</p>
</li>
<li>
<p>Payload: 消息负载数据</p>
</li>
</ul>
<ol start="5">
<li>
<p><strong>Delete</strong>资源数据</p>
<pre><code class="language-bash">coap://coap.me:&gt;get /sink
NULL response!
coap://coap.me:&gt;delete /sink
----------------------------------- Response -----------------------------------
DELETE coap://coap.me/sink
MID: 64264, Type: ACK, Token: 0C2338F7FB9447F7, RTT: 274ms
Options: {&quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 202-Accepted, Payload: 9B
................................... Payload ....................................
DELETE OK
--------------------------------------------------------------------------------
coap://coap.me:&gt;get /sink
----------------------------------- Response -----------------------------------
GET coap://coap.me/sink
MID: 64265, Type: ACK, Token: 04A8DACB450186A7, RTT: 276ms
Options: {&quot;ETag&quot;:0xa6166ef62ce0b4bc, &quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 205-Reset Content, Payload: 38B
................................... Payload ....................................
I was deleted, and you put here: hello
--------------------------------------------------------------------------------
coap://coap.me:&gt;
</code></pre>
</li>
<li>
<p><strong>PUT</strong>资源数据</p>
<pre><code class="language-bash">coap://coap.me:&gt;put /sink --payload 'Hi From IoT Technology' --format text/plain
----------------------------------- Response -----------------------------------
PUT coap://coap.me/sink
MID: 64266, Type: ACK, Token: FC2CE751AD5A232A, RTT: 368ms
Options: {&quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 204-No Content, Payload: 6B
................................... Payload ....................................
PUT OK
--------------------------------------------------------------------------------
coap://coap.me:&gt;get /sink
----------------------------------- Response -----------------------------------
GET coap://coap.me/sink
MID: 64267, Type: ACK, Token: 3439364639206648, RTT: 13478ms
Options: {&quot;ETag&quot;:0x01fd3e1298b1fb7a, &quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 205-Reset Content, Payload: 36B
................................... Payload ....................................
you put here: Hi From IoT Technology
--------------------------------------------------------------------------------
coap://coap.me:&gt;
</code></pre>
</li>
<li>
<p><strong>POST</strong>资源数据</p>
</li>
</ol>
<pre><code class="language-bash">coap://coap.me:&gt;delete /sink
----------------------------------- Response -----------------------------------
DELETE coap://coap.me/sink
MID: 64268, Type: ACK, Token: 0CCB572626A124A6, RTT: 391ms
Options: {&quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 202-Accepted, Payload: 9B
................................... Payload ....................................
DELETE OK
--------------------------------------------------------------------------------
coap://coap.me:&gt;post /sink --payload 'testing for post data' --format text/plain
----------------------------------- Response -----------------------------------
POST coap://coap.me/sink
MID: 64269, Type: ACK, Token: A441392CC855852D, RTT: 424ms
Options: {&quot;Location-Path&quot;:[&quot;location1&quot;,&quot;location2&quot;,&quot;location3&quot;], &quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 201-Created, Payload: 7B
................................... Payload ....................................
POST OK
--------------------------------------------------------------------------------
coap://coap.me:&gt;get /sink
----------------------------------- Response -----------------------------------
GET coap://coap.me/sink
MID: 64270, Type: ACK, Token: DC24713232F17DB7, RTT: 325ms
Options: {&quot;ETag&quot;:0xf97973ea26db6781, &quot;Content-Format&quot;:&quot;text/plain&quot;}
Status : 205-Reset Content, Payload: 54B
................................... Payload ....................................
I was deleted, and you put here: testing for post data
--------------------------------------------------------------------------------
</code></pre>
<p>到此为止，我相信大家对CoAP协议的消息格式应该有了一定的认知。更多信息和使用请浏览这个库的<a href="https://github.com/sanshengshui/coap-shell">README</a>。</p>
<p>下一篇，我将手把手带大家用Eclipse Californium搭建CoAP Server服务。</p>
<h2 id="参考资料">参考资料</h2>
<p>CoAP英文官方文档: <a href="https://tools.ietf.org/html/rfc7252">https://tools.ietf.org/html/rfc7252</a></p>
<p>CoAP Wiki百科: <a href="https://en.wikipedia.org/wiki/Constrained_Application_Protocol">https://en.wikipedia.org/wiki/Constrained_Application_Protocol</a></p>
<p>CoAP-Shell客户端: <a href="https://github.com/sanshengshui/coap-shell">https://github.com/sanshengshui/coap-shell</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-08 10:31</span>&nbsp;
<a href="https://www.cnblogs.com/sanshengshui/">三升水</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12849014" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12849014);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 463176, cb_blogApp = 'sanshengshui', cb_blogUserGuid = '95d12c74-ef92-408d-d41d-08d6222f6651';
    var cb_entryId = 12849014, cb_entryCreatedDate = '2020-05-08 10:31', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 三升水
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>