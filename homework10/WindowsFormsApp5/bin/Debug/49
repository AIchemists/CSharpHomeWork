<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="前文传送门： &amp;quot;「一本正经的聊数据结构（1）：时间复杂度」&amp;quot; &amp;quot;「一本正经的聊数据结构（2）：数组与向量」&amp;quot; &amp;quot;「一本正经的聊数据结构（3）：栈和队列" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>一本正经的聊数据结构（5）：二叉树的存储结构与遍历 - 极客挖掘机 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=OL4qeo1LNGlN1rKIhv5UctANvt0M6Nx6kLzr_ffx3Xk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/babycomeon/custom.css?v=U1O5CRU9t/iVLoUCVHLTE38GFDE=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/babycomeon/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/babycomeon/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/babycomeon/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 271437;
        var currentBlogApp = 'babycomeon';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/babycomeon/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/babycomeon/">极客挖掘机</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/babycomeon/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%9E%81%E5%AE%A2%E6%8C%96%E6%8E%98%E6%9C%BA">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/babycomeon/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
192&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
145</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/babycomeon/p/12848388.html">一本正经的聊数据结构（5）：二叉树的存储结构与遍历</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><img src="https://cdn.geekdigging.com/DataStructure/head.png" alt=""></p>
<p>前文传送门：</p>
<p><a href="https://www.geekdigging.com/2020/03/28/6072951828/">「一本正经的聊数据结构（1）：时间复杂度」</a></p>
<p><a href="https://www.geekdigging.com/2020/04/14/3143023839/">「一本正经的聊数据结构（2）：数组与向量」</a></p>
<p><a href="https://www.geekdigging.com/2020/04/25/5497775819/">「一本正经的聊数据结构（3）：栈和队列」</a></p>
<p><a href="https://www.geekdigging.com/2020/05/03/1553615465/">「一本正经的聊数据结构（4）：树」</a></p>
<h2 id="存储结构">存储结构</h2>
<p>前面的内容我们介绍了树和二叉树的一些基础概念，树是数据结构中的重中之重，而二叉树又是树结构中的重点。</p>
<p>一直以来，包括我上学的年代，对树和二叉树的掌握都是模棱两可，希望能通过这篇文章可以给各位讲清楚这些疑难点。</p>
<p>二叉树的存储结构分为两种，一种是<strong>顺序存储结构</strong>，另一种是<strong>链式存储结构</strong>。</p>
<h3 id="顺序存储结构">顺序存储结构</h3>
<p>顺序存储结构就是使用一维数组存储二叉树中的节点，并且节点的存储位置，就是数组的下标索引。</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu.png" alt=""></p>
<p>存储在一维数组中的样子如下：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu_cunchu.png" alt=""></p>
<p>这个示例是一个 <strong>完全二叉树</strong> 的示例， <strong>完全二叉树</strong> 所对应的顺序存储刚好填满整个数组，但是如果二叉树不是 <strong>完全二叉树</strong> 的时候，采用顺序存储又是怎样的呢？</p>
<p>下图中浅色结点表示结点不存在：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu_1.png" alt=""></p>
<p>存储在一维数组中的样子如下：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu_cunchu_1.png" alt=""></p>
<p>其中， <code>∧</code> 表示数组中此位置没有存储结点。可以看到，使用顺序存储已经造成了空间浪费的情况。</p>
<p>如果是极端的右斜二叉树，顺序存储情况会如何呢？</p>
<p>如下：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu_2.png" alt=""></p>
<p>存储在一维数组中的样子如下：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu_cunchu_2.png" alt=""></p>
<p>可以看到，在顺序存储结构下，极端的右斜二叉树存储造成了存储空间的极大的浪费。</p>
<p>所以顺序存储方式一般适合完全二叉树。</p>
<h3 id="链式存储结构">链式存储结构</h3>
<p>顺序存储结构有些无法满足二叉树的存储，那么我们考虑使用链式存储结构。</p>
<p>二叉树每个节点最多会有两个孩子，因此，可以将结点数据结构定义为一个数据和两个指针域。如下：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_lianshi.png" alt=""></p>
<p>那么刚才我们的那个完全二叉树的存储结构就可以这么展现：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_lianshi_1.png" alt=""></p>
<h2 id="遍历">遍历</h2>
<p>二叉树的 <strong>遍历</strong> 是指从二叉树的根结点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点被访问一次，且仅被访问一次。</p>
<p>二叉树的遍历依据访问次序可以分为四种方式：</p>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层次遍历</li>
</ul>
<h3 id="前序遍历">前序遍历</h3>
<p>简单来讲， <strong>前序遍历</strong> 就是由根节点开始，当第一次到达结点时就输出结点数据，按照先向左在向右的方向访问。</p>
<p>还是用这个完全二叉树举例子：</p>
<p><img src="https://cdn.geekdigging.com/DataStructure/erchashu_shunxu.png" alt=""></p>
<p>当他进行前序遍历的时候，访问顺序如下：</p>
<blockquote>
<p>从根结点出发，则第一次到达结点 A ，故输出 A ;</p>
<p>继续向左访问，第一次访问结点 B ，故输出 B ；</p>
<p>按照同样规则，输出 D ，输出 H ；</p>
<p>当到达叶子结点H，返回到 D ，此时已经是第二次到达 D ，故不在输出 D ，进而向 D 右子树访问， D 右子树不为空，则访问至 I ，第一次到达 I ，则输出 I ；</p>
<p>I 为叶子结点，则返回到 D ， D 左右子树已经访问完毕，则返回到 B ，进而到 B 右子树，第一次到达 E ，故输出 E ；</p>
<p>向E左子树，故输出 J ；</p>
<p>按照同样的访问规则，继续输出 C 、 F 、 G 。</p>
</blockquote>
<p>所以，这个完全二叉树的前序遍历结果为： <strong>ABDHIEJCFG</strong> 。</p>
<h3 id="中序遍历">中序遍历</h3>
<p><strong>中序遍历</strong> 就是从二叉树的根结点出发，当第二次到达结点时就输出结点数据，按照先向左在向右的方向访问。</p>
<p>还是上面的完全二叉树，访问顺序如下：</p>
<blockquote>
<p>从根结点出发，则第一次到达结点 A ，不输出 A ，继续向左访问，第一次访问结点 B ，不输出 B ；继续到达 D ， H ；</p>
<p>到达 H ， H 左子树为空，则返回到 H ，此时第二次访问 H ，故输出 H ；</p>
<p>H 右子树为空，则返回至 D ，此时第二次到达 D ，故输出 D ；</p>
<p>由 D 返回至 B ，第二次到达 B ，故输出 B ；</p>
<p>按照同样规则继续访问，输出 J 、 E 、 A 、 F 、 C 、 G ；</p>
</blockquote>
<p>所以，中序遍历的结果为： <strong>HDIBJEAFCG</strong> 。</p>
<h3 id="后序遍历">后序遍历</h3>
<p><strong>后序遍历</strong> 就是从二叉树的根结点出发，当第三次到达结点时就输出结点数据，按照先向左在向右的方向访问。</p>
<p><strong>后序遍历</strong> 的访问顺序如下：</p>
<blockquote>
<p>从根结点出发，则第一次到达结点 A ，不输出 A ，继续向左访问，第一次访问结点 B ，不输出 B ；继续到达 D ， H ；</p>
<p>到达 H ， H 左子树为空，则返回到 H ，此时第二次访问 H ，不输出 H ；</p>
<p>H 右子树为空，则返回至 H ，此时第三次到达 H ，故输出 H ；</p>
<p>由 H 返回至 D ，第二次到达 D ，不输出 D ；</p>
<p>继续访问至 I ， I 左右子树均为空，故第三次访问 I 时，输出 I ；</p>
<p>返回至 D ，此时第三次到达 D ，故输出 D ；</p>
<p>按照同样规则继续访问，输出 J 、 E 、 B 、 F 、 G 、 C ， A ；</p>
</blockquote>
<p>所以，后序遍历的结果为： <strong>HIDJEBFGCA</strong> 。</p>
<h3 id="层次遍历">层次遍历</h3>
<p><strong>层次遍历</strong> 就是按照树的层次自上而下的遍历二叉树。</p>
<p>层次遍历的访问顺序如下：</p>
<blockquote>
<p>从根节点出发，第一个到达节点 A ，直接输出 A ；</p>
<p>继续向左访问，到达节点 B ，输出节点 B ，继续访问节点的右节点 C ，输出节点 C ，此时，第二层访问结束，继续访问第三层；</p>
<p>访问节点 B 的左节点 D ，输出 D ，继续访问节点 B 的右节点 E ，输出节点 E ；</p>
<p>剩下依次访问节点 F 、 G 、 H 、 I 、 J 。</p>
</blockquote>
<p>所以层次遍历的结果为： <strong>ABCDEFGHIJ</strong> 。</p>
<h2 id="小结">小结</h2>
<p>本文介绍了二叉树的存储结构以及四种遍历方式，各位看完了应该对二叉树有一个初步的认知，如果不涉及一些变种的二叉树，仅二叉树的基础内容而言，还是比较简单的，希望各位同学能够自己思考下，在大脑中能建立出一个二叉树的模型，方便后面的学习。</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.jianshu.com/p/bf73c8d50dc2">https://www.jianshu.com/p/bf73c8d50dc2</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-08 08:57</span>&nbsp;
<a href="https://www.cnblogs.com/babycomeon/">极客挖掘机</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12848388" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12848388);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 271437, cb_blogApp = 'babycomeon', cb_blogUserGuid = '3e50558f-07e5-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 12848388, cb_entryCreatedDate = '2020-05-08 08:57', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 极客挖掘机
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?0b8457e2520fe3afff6f4df6c82109c9";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script type="text/javascript" src="https://s5.cnzz.com/z_stat.php?id=1277837552&web_id=1277837552"></script>
    </div>
</body>
</html>